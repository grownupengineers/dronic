#!/usr/bin/env python
#
# on ArchLinux, python is actually python3
# so ... shall we move forward and keep that shebang and 'python'?
# or go back to using 'python3'
#
#
# This is the dronic manager
# mainly (currently) to manage allowable imports
#

import os

#
# one import per line
#
# in the form:
#   'import:<module>:[<as>]'
#
# TODO maybe change this to a directory
CONF_FILE = f"{os.getenv('HOME')}/.dronic.conf"

if not os.path.exists(CONF_FILE):
    # create empty file
    os.mknod(CONF_FILE)

# dangerous/disallowed imports
_DANGER_IMPORT = [
    "os"
    "importlib"
]

def manager_help():
    print(
        "Dronic Manager",
        "",
        "\thelp - show this help",
        "\timport - modules subcommand",
        "",
        sep='\n'
    )

def imports_help():
    print(
        "Dronic Manager - import",
        "",
        "\thelp - show this help",
        "\tlist [<filter>] - list imports eventually containing <filter>",
        "\tadd <module> [<as>] - add module import, eventually defining an alias for the module",
        "\tdel <module> - delete module from the import list",
        "",
        "import GitPython as git:",
        "$ dronic-mgr import add GitPython git",
        "",
        sep='\n'
    )
    exit(0)

def imports_list(filter=''):
    conf_file = open(CONF_FILE)

    for _line in conf_file:
        # sanitize
        line = _line.strip()
        if not line.startswith('import:'):
            continue
        # ignore beginning
        line = line.split(':',1)[1]
        # filter
        if filter not in line:
            continue
        # check 'as'
        im_as = None
        im_mod = line
        if ':' in line:
            im_mod, im_as = line.split(':',1)
        
        # display
        args = ["import",im_mod]
        if im_as is not None:
            args += ["as",im_as]
        print(**args)
    #endfor line in conf_file
    conf_file.close()
    return 0

def imports_add(mod: str, _as: str = None):

    # check dangerous imports
    top_module = mod.split('.')[0]

    if top_module in _DANGER_IMPORT:
        print("That module is not allowed")
        return 1
    
    # otherwise, add to imports
    parts = ['import',mod]
    if _as is not None:
        parts += [_as]
    
    conf_file = open(CONF_FILE,'a')
    conf_file.write(':'.join(parts)+"\n")
    conf_file.close()

    print('Module added to import')
    return 0

def imports_del(mod: str):

    _search = f"import:{mod}"

    conf_file = open(CONF_FILE)
    lines = conf_file.readlines()
    conf_file.close()
    for i in range(len(lines)):
        if not lines[i].startswith(_search):
            continue
        # else, need extra validation
        rest = line.replace(_search,'')
        if rest[0] in ':\n':
            lines.pop(i)
            break
    else:
        print("Module not found")
        return 1
    
    # open for writing this time
    conf_file = open(CONF_FILE, 'w')
    conf_file.write(''.join(lines))
    conf_file.close()

    print("Module removed")
    return 0

_COMMANDS = {
    '': manager_help,
    'help': manager_help,
    'import': imports_help,
    'import:help': imports_help,
    'import:list': imports_list,
    'import:add': imports_add,
    'import:del': imports_del
}

def main(args):

    # try to look for with 2 arguments (command action)
    command_map = ':'.join(args[:2])
    print(command_map)
    if command_map in _COMMANDS.keys():
        try:
            return _COMMANDS[command_map](**args[2:])
        except TypeError:
            pass
            # probably due to missing parameters
            # fall down:
        try:
            return _COMMANDS[args[0]]()    # the help command
        except IndexError:
            # no parameters passed at all
            return manager_help()
    # return 0

if __name__ == '__main__':
    from sys import argv
    exit(
        main(
            argv[1:]
        )
    )